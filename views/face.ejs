<!DOCTYPE html>
<html>
    <head>
        <link
            href="//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css"
            rel="stylesheet"
            id="bootstrap-css"
        />
        <link
            href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.css"
            type="text/css"
            rel="stylesheet"
        />
        <script
            src="https://cdn.socket.io/3.1.3/socket.io.min.js"
            integrity="sha384-cPwlPLvBTa3sKAgddT6krw0cJat7egBga3DJepJyrLl4Q9/5WLra3rrnMcyTyOnh"
            crossorigin="anonymous"
        ></script>
        <script src="//cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
        <script src="//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js"></script>
    </head>

    <body>
        <div class="container">
            <h3 class="text-center">FaceTime</h3>
            <div id="welcome">
                <form>
                    <input type="text" placeholder="Room Name" required />
                    <button type="submit">Join Room</button>
                </form>
            </div>
            <div id="call">
                <div id="myStream">
                    <video
                        id="myFace"
                        autoplay
                        playsinline
                        width="400"
                        height="400"
                    ></video>
                    <button id="mute">Mute</button>
                    <button id="camera">Turn Camera Off</button>
                    <select id="cameras"></select>

                    <video
                        id="peersFace"
                        autoplay
                        playsinline
                        width="400"
                        height="400"
                    ></video>
                </div>
            </div>
        </div>
    </body>

    <script>
        const myFace = document.getElementById('myFace');
        const muteBtn = document.getElementById('mute');
        const cameraBtn = document.getElementById('camera');
        const cameraSelect = document.getElementById('cameras');
        const call = document.getElementById('call');
        call.hidden = true;

        let myStream;
        let muted = false;
        let cameraOff = false;
        let roomName;
        let myPeerConnection;
        let myDataChannel;

        const socket = io('http://localhost:8080');
        // Socket Code
        socket.on('welcome', async () => {
            console.log('welcome');
            myDataChannel = myPeerConnection.createDataChannel('chat');
            myDataChannel.addEventListener('message', (event) =>
                console.log(event.data),
            );
            console.log('made data channel');
            const offer = await myPeerConnection.createOffer();
            myPeerConnection.setLocalDescription(offer);
            console.log('sent the offer');
            socket.emit('offer', offer, roomName);
        });

        socket.on('offer', async (offer) => {
            myPeerConnection.addEventListener('datachannel', (event) => {
                myDataChannel = event.channel;
                myDataChannel.addEventListener('message', (event) =>
                    console.log(event.data),
                );
            });
            console.log('received the offer');
            myPeerConnection.setRemoteDescription(offer);
            const answer = await myPeerConnection.createAnswer();
            myPeerConnection.setLocalDescription(answer);
            socket.emit('answer', answer, roomName);
            console.log('sent the answer');
        });

        socket.on('answer', (answer) => {
            console.log('received the answer');
            myPeerConnection.setRemoteDescription(answer);
        });

        socket.on('ice', (ice) => {
            console.log('received candidate');
            myPeerConnection.addIceCandidate(ice);
        });

        // RTC Code
        function makeConnection() {
            myPeerConnection = new RTCPeerConnection({
                iceServers: [
                    {
                        urls: [
                            'stun:stun.l.google.com:19302',
                            'stun:stun1.l.google.com:19302',
                            'stun:stun2.l.google.com:19302',
                            'stun:stun3.l.google.com:19302',
                            'stun:stun4.l.google.com:19302',
                        ],
                    },
                ],
            });
            myPeerConnection.addEventListener('icecandidate', handleIce);
            myPeerConnection.addEventListener('addstream', handleAddStream);
            myStream
                .getTracks()
                .forEach((track) => myPeerConnection.addTrack(track, myStream));
        }

        function handleIce(data) {
            console.log('sent candidate');
            socket.emit('ice', data.candidate, roomName);
        }

        function handleAddStream(data) {
            const peersFace = document.getElementById('peersFace');
            peersFace.srcObject = data.stream;
        }

        async function getCameras() {
            try {
                const devices = await navigator.mediaDevices.enumerateDevices();
                const cameras = devices.filter(
                    (device) => device.kind === 'videoinput',
                );
                const currentCamera = myStream.getVideoTracks()[0];
                cameras.forEach((camera) => {
                    const option = document.createElement('option');
                    option.value = camera.deviceId;
                    option.innerText = camera.label;
                    if (currentCamera.label === camera.label) {
                        option.selected = true;
                    }
                    cameraSelect.appendChild(option);
                });
            } catch (e) {
                console.log(e);
            }
        }

        async function getMedia(deviceId) {
            const initialConstraints = {
                audio: true,
                video: { facingMode: 'user' },
            };
            const cameraConstraints = {
                audio: true,
                video: { deviceId: { exact: deviceId } },
            };
            try {
                myStream = await navigator.mediaDevices.getUserMedia(
                    deviceId ? cameraConstraints : initialConstraints,
                );
                myFace.srcObject = myStream;
                if (!deviceId) {
                    await getCameras();
                }
            } catch (e) {
                console.log(e);
            }
        }

        function handleMuteClick() {
            myStream
                .getAudioTracks()
                .forEach((track) => (track.enabled = !track.enabled));
            if (!muted) {
                muteBtn.innerText = 'Unmute';
                muted = true;
            } else {
                muteBtn.innerText = 'Mute';
                muted = false;
            }
        }

        function handleCameraClick() {
            myStream
                .getVideoTracks()
                .forEach((track) => (track.enabled = !track.enabled));
            if (cameraOff) {
                cameraBtn.innerText = 'Turn Camera Off';
                cameraOff = false;
            } else {
                cameraBtn.innerText = 'Turn Camera On';
                cameraOff = true;
            }
        }

        async function handleCameraChange() {
            await getMedia(cameraSelect.value);
            if (myPeerConnection) {
                const videoTrack = myStream.getVideoTracks()[0];
                const videoSender = myPeerConnection
                    .getSenders()
                    .find((sender) => sender.track.kind === 'video');
                videoSender.replaceTrack(videoTrack);
            }
        }

        muteBtn.addEventListener('click', handleMuteClick);
        cameraBtn.addEventListener('click', handleCameraClick);
        cameraSelect.addEventListener('input', handleCameraChange);

        // Welcome Form (join a room)
        const welcome = document.getElementById('welcome');
        const welcomeForm = welcome.querySelector('form');

        async function initCall() {
            welcome.hidden = true;
            call.hidden = false;
            await getMedia();
            makeConnection();
        }

        async function handleWelcomeSubmit(event) {
            event.preventDefault();
            const input = welcomeForm.querySelector('input');
            await initCall();
            console.log(input.value);
            socket.emit('join_room', input.value);
            roomName = input.value;
            input.value = '';
        }

        welcomeForm.addEventListener('submit', handleWelcomeSubmit);
    </script>
</html>
